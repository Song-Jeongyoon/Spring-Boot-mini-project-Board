package com.example.board.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;
import com.example.board.BoardDTO;
import com.example.board.service.BoardService;


@Controller // 컨트롤러 선언
//@ResponseController -> controller + responseboody
@RequestMapping("/board/*") // getmapping + postmapping
public class BoardController {
	BoardDTO dto; // 데이터 전달 확인용

    @Autowired
    private BoardService boardService;      //서비스와 연결

    // Slf4j 로그
    //private static final Logger logger = LoggerFactory.getLogger(BoardController.class);
    
    /*
     * RequestMapping을 통해 해당 url을 호출 시 해당되는 화면(view)을 매핑시켜주는 역할
     * localhost:8080/openBoardList.do 에서 "/openBoardList.do" 맵핑 설정
     * 해당 request 호출 시 리턴되는 화면 (BoardList.jsp) 호출 
     */ 
    //@RequestMapping("/openBoardList.do") 
    
    //게시물 목록
    @RequestMapping(value = "/openBoardList")
    public ModelAndView openBoardList() throws Exception{
    	
    	/*
    	* logger.debug("boardController dedug");
		* logger.info("boardController info");
		* logger.error("boardController error");
		*/ 
		    	 	
    	// jsp파일 부르기 - 방법1
    	// return "BoardList"; (String 메소드로 변경)
    	   	
    	// jsp파일 부르기 - 방법2	   	
    	ModelAndView mv = new ModelAndView("/BoardList");    	
        //게시글 목록을 조회하기 위해 ServiceImpl 클래스의 boardList 메서드 호출
        List<BoardDTO> boardlist = boardService.boardList();  
        mv.addObject("list", boardlist);

        return mv;
        
    }
    
    // 게시판 목록 조회 + 검색 (Get)
    @GetMapping(value = "/search")
    // localhost:8080/openBoardList/search?searchType=writer&keyword=최수빈 <- 이런식으로 구글에 직접 입력하여 확인
    public ModelAndView search(@RequestParam(value="searchType") String searchType, 
    					@RequestParam(value="keyword") String keyword) throws Exception{ // URL을 통해 searchType과 keyword를 받아낼 수 있도록
    	
    	ModelAndView mv = new ModelAndView("/BoardList");
    	List<BoardDTO> boardlist = boardService.boardListSearch(searchType, keyword);
    	mv.addObject("list", boardlist);

        return mv;
    }
    
    // 게시판 목록 조회 + 검색 (Post) 
    /* @PostMapping(value = "/search")
    public ModelAndView search(@RequestParam(value="searchType") String searchType, 
    					@RequestParam(value="keyword") String keyword) throws Exception{ 
    	
    	ModelAndView mv = new ModelAndView("/BoardList");
    	List<BoardDTO> boardlist = boardService.boardListSearch(searchType, keyword);
    	mv.addObject("list", boardlist);

        return mv;
    }*/
    
    // 게시판 상세 조회 1 - form-data로 받을 떄
    @PostMapping(value = "/detail")
    @ResponseBody
   	public BoardDTO detail (@RequestParam(value="pIdx") int pIdx) throws Exception {
    	
    	System.out.println("Boardcontroller 작동 / 파라미터pIdx : " + pIdx);
           	
    	return boardService.boardDetail(pIdx);   	
    }
    
    /*
     * 게시판 상세 조회 2 - json으로 받을 때
	 * postman에서 raw-json으로 맞춰주고 직접 { "pIdx" : 1 } 입력
     * @RequestBody은 자동으로 json을 string에서 dto객체로 변환시켜줌 (json 키값 = dto 파라미터명 전제 필요)
     */ 
    /*
    @PostMapping(value = "/detail")
    @ResponseBody
     public BoardDTO detail (@RequestBody BoardDTO reqDto) throws Exception {
      
      	BoardDTO boarddetail = boardService.boardDetail(reqDto.getpIdx());           	
      	return boarddetail;
     }
     */
    
    // 게시물 작성폼 호출
    @PostMapping(value="/openInsert")
    @ResponseBody
    public String openInsertForm () throws Exception {
    	return "insert";
    }
    
    // 게시물 등록
    @PostMapping(value="/insertBoard")
    @ResponseBody
    public String insertBoard (BoardDTO reqDto) throws Exception {
    	boardService.boardInsert(reqDto);
    	return "게시물 등록 성공!"; 
    }
    
    /*
     * Put과 Post의 차이 : 멱등성 (동일한 요청을 한 번 보내는 것과 여러 번 연속으로 보내는 것이 같은 효과를 지님.)
     * PUT은 멱등성을 가짐
     * 여러 번 호출할 경우, 클라이언트가 받는 응답은 동일. 즉 똑같은 수정을 여러번해도 변경되지 않는다.
     */
    
    // 게시물 수정
    @PutMapping(value="/updateBoard")
    @ResponseBody
    public String updateBoard (BoardDTO reqDto) throws Exception {
    	boardService.boardUpdate(reqDto);
    	return "게시물 수정 성공!";
    }
    
} 
